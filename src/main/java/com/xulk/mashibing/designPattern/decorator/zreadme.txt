


设计初衷：通常可以通过继承来实现功能的拓展，如果需要拓展功能的种类繁多，那势必会生成很多子类，增加系统的复杂性

要点：装饰者与被装饰者拥有共同的超类，继承的目的是继承类型，而不是继承行为

给目标对象装饰上需要增加的功能

有一接口或抽象类代表目标对象拥有的功能

装饰器和目标对象同时去实现此抽象类（或接口）

在装饰器中有一个成员变量就是目标对象，并提供构造方法，在实现的方法里面，目标对象调用目标方法，并增加需要装饰的功能

测试的时候，new一个装饰器，将需要的目标对象传进去，调用装饰器的装饰方法



装饰者模式的设计原则为：对扩展开放、对修改关闭，
这句话体现在我如果想扩展被装饰者类的行为，无须修改装饰者抽象类，只需继承装饰者抽象类，
实现额外的一些装饰或者叫行为即可对被装饰者进行包装。所以：扩展体现在继承、修改体现在子类中，\
而不是具体的抽象类，这充分体现了依赖倒置原则.